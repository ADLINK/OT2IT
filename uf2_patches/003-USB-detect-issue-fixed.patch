commit d5ffd9f6f699a913206729944b3db920ead8f2ba
Author: Veera H <veera.h@adlinktech.com>
Date:   Wed Jan 31 13:10:44 2024 +0530

    USB Fixed

diff --git a/src/init_samd51.c b/src/init_samd51.c
index 5ed53f0..b183db9 100644
--- a/src/init_samd51.c
+++ b/src/init_samd51.c
@@ -1,6 +1,6 @@
 #include "uf2.h"
 
-#if 0
+#if ARDUINO_CLK_CONFIG
 void system_init(void) {
     /* Set 2 Flash Wait State for 48MHz , refer to TAB 56.6 in datasheet*/
     NVMCTRL->CTRLA.reg |= NVMCTRL_CTRLA_RWS(2);
@@ -84,11 +84,21 @@ void system_init(void) {
 #else
 static void OSCCTRL_Initialize(void)
 {
+    /****************** XOSC0 Initialization   ********************************/
+
+    /* Configure External Oscillator */
+    //OSCCTRL->XOSCCTRL[0].reg = OSCCTRL_XOSCCTRL_STARTUP(0U) | OSCCTRL_XOSCCTRL_IMULT(4U) | OSCCTRL_XOSCCTRL_IPTAT(3U) | OSCCTRL_XOSCCTRL_XTALEN | OSCCTRL_XOSCCTRL_ENABLE;
+    OSCCTRL->XOSCCTRL[0].reg = OSCCTRL_XOSCCTRL_STARTUP(0U) | OSCCTRL_XOSCCTRL_IMULT(4U) | OSCCTRL_XOSCCTRL_IPTAT(3U) | OSCCTRL_XOSCCTRL_ENABLE;
+    while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) != OSCCTRL_STATUS_XOSCRDY0)
+    {
+        /* Waiting for the XOSC Ready state */
+    }
 
     /****************** XOSC1 Initialization   ********************************/
 
     /* Configure External Oscillator */
-    OSCCTRL->XOSCCTRL[1].reg = OSCCTRL_XOSCCTRL_STARTUP(0U) | OSCCTRL_XOSCCTRL_IMULT(4U) | OSCCTRL_XOSCCTRL_IPTAT(3U) | OSCCTRL_XOSCCTRL_XTALEN | OSCCTRL_XOSCCTRL_ENABLE;
+    //OSCCTRL->XOSCCTRL[1].reg = OSCCTRL_XOSCCTRL_STARTUP(0U) | OSCCTRL_XOSCCTRL_IMULT(4U) | OSCCTRL_XOSCCTRL_IPTAT(3U) | OSCCTRL_XOSCCTRL_XTALEN | OSCCTRL_XOSCCTRL_ENABLE;
+    OSCCTRL->XOSCCTRL[1].reg = OSCCTRL_XOSCCTRL_STARTUP(0U) | OSCCTRL_XOSCCTRL_IMULT(4U) | OSCCTRL_XOSCCTRL_IPTAT(3U) | OSCCTRL_XOSCCTRL_ENABLE;
     while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) != OSCCTRL_STATUS_XOSCRDY1)
     {
         /* Waiting for the XOSC Ready state */
@@ -97,6 +107,15 @@ static void OSCCTRL_Initialize(void)
 
 static void OSC32KCTRL_Initialize(void)
 {
+    /****************** XOSC32K initialization  ******************************/
+
+    /* Configure 32K External Oscillator */
+    OSC32KCTRL->XOSC32K.reg = OSC32KCTRL_XOSC32K_STARTUP(2U) | OSC32KCTRL_XOSC32K_ENABLE | OSC32KCTRL_XOSC32K_CGM(1U) | OSC32KCTRL_XOSC32K_EN32K | OSC32KCTRL_XOSC32K_XTALEN;
+
+    while(!((OSC32KCTRL->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) == OSC32KCTRL_STATUS_XOSC32KRDY))
+    {
+        /* Waiting for the XOSC32K Ready state */
+    }
 
     OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL(0U);
 }
@@ -115,7 +134,7 @@ static void FDPLL0_Initialize(void)
     OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_FILTER(0U) | OSCCTRL_DPLLCTRLB_LTIME(0x0U)| OSCCTRL_DPLLCTRLB_REFCLK(0U) | OSCCTRL_DPLLCTRLB_LBYPASS;
 
 
-    OSCCTRL->Dpll[0].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0U) | OSCCTRL_DPLLRATIO_LDR(119U);
+    OSCCTRL->Dpll[0].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(22U) | OSCCTRL_DPLLRATIO_LDR(2928U);
 
     while((OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO) == OSCCTRL_DPLLSYNCBUSY_DPLLRATIO)
     {
@@ -151,7 +170,7 @@ static void FDPLL1_Initialize(void)
     OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_FILTER(0U) | OSCCTRL_DPLLCTRLB_LTIME(0x0U)| OSCCTRL_DPLLCTRLB_REFCLK(0U) | OSCCTRL_DPLLCTRLB_LBYPASS;
 
 
-    OSCCTRL->Dpll[1].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0U) | OSCCTRL_DPLLRATIO_LDR(95U);
+    OSCCTRL->Dpll[1].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(3U) | OSCCTRL_DPLLRATIO_LDR(3661U);
 
     while((OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO) == OSCCTRL_DPLLSYNCBUSY_DPLLRATIO)
     {
@@ -175,12 +194,51 @@ static void FDPLL1_Initialize(void)
 
 static void DFLL_Initialize(void)
 {
+    // Temporarily switch the CPU to the internal 32k oscillator while we
+    // reconfigure the DFLL.
+    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) |
+                           GCLK_GENCTRL_OE |
+                           GCLK_GENCTRL_GENEN;
+
+    while (GCLK->SYNCBUSY.bit.GENCTRL0) {
+        /* Wait for synchronization */
+    }
+
+    // Configure the DFLL for USB clock recovery.
+    OSCCTRL->DFLLCTRLA.reg = 0;
+
+    OSCCTRL->DFLLMUL.reg = OSCCTRL_DFLLMUL_CSTEP( 0x1 ) |
+                           OSCCTRL_DFLLMUL_FSTEP( 0x1 ) |
+                           OSCCTRL_DFLLMUL_MUL( 0xBB80 );
+
+    while (OSCCTRL->DFLLSYNC.bit.DFLLMUL) {
+        /* Wait for synchronization */
+    }
+
+    OSCCTRL->DFLLCTRLB.reg = 0;
+    while (OSCCTRL->DFLLSYNC.bit.DFLLCTRLB) {
+        /* Wait for synchronization */
+    }
+
+    OSCCTRL->DFLLCTRLA.bit.ENABLE = true;
+    while (OSCCTRL->DFLLSYNC.bit.ENABLE) {
+        /* Wait for synchronization */
+    }
+
+    OSCCTRL->DFLLVAL.reg = OSCCTRL->DFLLVAL.reg;
+    while(OSCCTRL->DFLLSYNC.bit.DFLLVAL ) {}
+
+    OSCCTRL->DFLLCTRLB.reg = OSCCTRL_DFLLCTRLB_WAITLOCK |
+    OSCCTRL_DFLLCTRLB_CCDIS | OSCCTRL_DFLLCTRLB_USBCRM ;
+
+    while (!OSCCTRL->STATUS.bit.DFLLRDY) {
+        /* Wait for synchronization */
+    }
 }
 
 
 static void GCLK0_Initialize(void)
 {
-
     /* selection of the CPU clock Division */
     MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV(0x01U);
 
@@ -188,7 +246,7 @@ static void GCLK0_Initialize(void)
     {
         /* Wait for the Main Clock to be Ready */
     }
-    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_DIV(1U) | GCLK_GENCTRL_SRC(7U) | GCLK_GENCTRL_GENEN;
+    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_DIV(1U) | GCLK_GENCTRL_SRC(6U) | GCLK_GENCTRL_GENEN;
 
     while((GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL_GCLK0) == GCLK_SYNCBUSY_GENCTRL_GCLK0)
     {
@@ -198,7 +256,7 @@ static void GCLK0_Initialize(void)
 
 static void GCLK1_Initialize(void)
 {
-    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_DIV(12U) | GCLK_GENCTRL_SRC(1U) | GCLK_GENCTRL_GENEN;
+    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_DIV(1U) | GCLK_GENCTRL_SRC(5U) | GCLK_GENCTRL_GENEN;
 
     while((GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL_GCLK1) == GCLK_SYNCBUSY_GENCTRL_GCLK1)
     {
@@ -208,7 +266,7 @@ static void GCLK1_Initialize(void)
 
 static void GCLK2_Initialize(void)
 {
-    GCLK->GENCTRL[2].reg = GCLK_GENCTRL_DIV(2U) | GCLK_GENCTRL_SRC(8U) | GCLK_GENCTRL_GENEN;
+    GCLK->GENCTRL[2].reg = GCLK_GENCTRL_DIV(2U) | GCLK_GENCTRL_SRC(7U) | GCLK_GENCTRL_GENEN;
 
     while((GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL_GCLK2) == GCLK_SYNCBUSY_GENCTRL_GCLK2)
     {
@@ -217,9 +275,21 @@ static void GCLK2_Initialize(void)
 }
 
 void system_init(void) {
+    /* Set 2 Flash Wait State for 48MHz , refer to TAB 56.6 in datasheet*/
+    NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_RWS(3) | NVMCTRL_CTRLA_AUTOWS;
+
     /* MISRAC 2012 deviation block start */
     /* MISRA C-2012 Rule 2.2 deviated in this file.  Deviation record ID - H3_MISRAC_2012_R_2_2_DR_2 */
 
+    /* Software reset the module to ensure it is re-initialized correctly */
+    /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
+     * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete
+     */
+    GCLK->CTRLA.bit.SWRST = 1;
+    while (GCLK->SYNCBUSY.bit.SWRST) {
+        /* wait for reset to complete */
+    }
+
     /* Function to Initialize the Oscillators */
     OSCCTRL_Initialize();
 
@@ -251,14 +321,7 @@ void system_init(void) {
 
     /* Configure the APBB Bridge Clocks */
     MCLK->APBBMASK.reg = 0x18057U;
-
-    /* Disable DFLL */
-    OSCCTRL->DFLLCTRLA.reg &= ~(OSCCTRL_DFLLCTRLA_ENABLE);
-    while((OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_ENABLE) == OSCCTRL_DFLLSYNC_ENABLE)
-    {
-        /* Waiting for the DPLL enable synchronization */
-    }
-    
+   
     SysTick_Config(1000);
 }
 #endif
