commit 251c03a696026eb0d7e645862aaaf1cb4687bdd7
Author: Veera H <veera.h@adlinktech.com>
Date:   Wed Jan 24 20:00:21 2024 +0530

    clock config for ethernet

diff --git a/src/init_samd51.c b/src/init_samd51.c
index cec88fc..5ed53f0 100644
--- a/src/init_samd51.c
+++ b/src/init_samd51.c
@@ -1,5 +1,6 @@
 #include "uf2.h"
 
+#if 0
 void system_init(void) {
     /* Set 2 Flash Wait State for 48MHz , refer to TAB 56.6 in datasheet*/
     NVMCTRL->CTRLA.reg |= NVMCTRL_CTRLA_RWS(2);
@@ -80,5 +81,186 @@ void system_init(void) {
 
     SysTick_Config(1000);
 }
+#else
+static void OSCCTRL_Initialize(void)
+{
+
+    /****************** XOSC1 Initialization   ********************************/
+
+    /* Configure External Oscillator */
+    OSCCTRL->XOSCCTRL[1].reg = OSCCTRL_XOSCCTRL_STARTUP(0U) | OSCCTRL_XOSCCTRL_IMULT(4U) | OSCCTRL_XOSCCTRL_IPTAT(3U) | OSCCTRL_XOSCCTRL_XTALEN | OSCCTRL_XOSCCTRL_ENABLE;
+    while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) != OSCCTRL_STATUS_XOSCRDY1)
+    {
+        /* Waiting for the XOSC Ready state */
+    }
+}
+
+static void OSC32KCTRL_Initialize(void)
+{
+
+    OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL(0U);
+}
+
+static void FDPLL0_Initialize(void)
+{
+    GCLK->PCHCTRL[1].reg = GCLK_PCHCTRL_GEN(0x1U)  | GCLK_PCHCTRL_CHEN;
+    while ((GCLK->PCHCTRL[1].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN)
+    {
+        /* Wait for synchronization */
+    }
+
+    /****************** DPLL0 Initialization  *********************************/
+
+    /* Configure DPLL    */
+    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_FILTER(0U) | OSCCTRL_DPLLCTRLB_LTIME(0x0U)| OSCCTRL_DPLLCTRLB_REFCLK(0U) | OSCCTRL_DPLLCTRLB_LBYPASS;
+
+
+    OSCCTRL->Dpll[0].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0U) | OSCCTRL_DPLLRATIO_LDR(119U);
+
+    while((OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO) == OSCCTRL_DPLLSYNCBUSY_DPLLRATIO)
+    {
+        /* Waiting for the synchronization */
+    }
+
+    /* Enable DPLL */
+    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
+
+    while((OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE) == OSCCTRL_DPLLSYNCBUSY_ENABLE )
+    {
+        /* Waiting for the DPLL enable synchronization */
+    }
+
+    while((OSCCTRL->Dpll[0].DPLLSTATUS.reg & (OSCCTRL_DPLLSTATUS_LOCK | OSCCTRL_DPLLSTATUS_CLKRDY)) !=
+                (OSCCTRL_DPLLSTATUS_LOCK | OSCCTRL_DPLLSTATUS_CLKRDY))
+    {
+        /* Waiting for the Ready state */
+    }
+}
+
+static void FDPLL1_Initialize(void)
+{
+    GCLK->PCHCTRL[2].reg = GCLK_PCHCTRL_GEN(0x1U)  | GCLK_PCHCTRL_CHEN;
+    while ((GCLK->PCHCTRL[1].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN)
+    {
+        /* Wait for synchronization */
+    }
+
+    /****************** DPLL1 Initialization  *********************************/
+
+    /* Configure DPLL    */
+    OSCCTRL->Dpll[1].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_FILTER(0U) | OSCCTRL_DPLLCTRLB_LTIME(0x0U)| OSCCTRL_DPLLCTRLB_REFCLK(0U) | OSCCTRL_DPLLCTRLB_LBYPASS;
+
+
+    OSCCTRL->Dpll[1].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0U) | OSCCTRL_DPLLRATIO_LDR(95U);
+
+    while((OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO) == OSCCTRL_DPLLSYNCBUSY_DPLLRATIO)
+    {
+        /* Waiting for the synchronization */
+    }
+
+    /* Enable DPLL */
+    OSCCTRL->Dpll[1].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
+
+    while((OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE) == OSCCTRL_DPLLSYNCBUSY_ENABLE)
+    {
+        /* Waiting for the DPLL enable synchronization */
+    }
+
+    while((OSCCTRL->Dpll[1].DPLLSTATUS.reg & (OSCCTRL_DPLLSTATUS_LOCK | OSCCTRL_DPLLSTATUS_CLKRDY)) !=
+                (OSCCTRL_DPLLSTATUS_LOCK | OSCCTRL_DPLLSTATUS_CLKRDY))
+    {
+        /* Waiting for the Ready state */
+    }
+}
+
+static void DFLL_Initialize(void)
+{
+}
+
+
+static void GCLK0_Initialize(void)
+{
+
+    /* selection of the CPU clock Division */
+    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV(0x01U);
+
+    while((MCLK->INTFLAG.reg & MCLK_INTFLAG_CKRDY) != MCLK_INTFLAG_CKRDY)
+    {
+        /* Wait for the Main Clock to be Ready */
+    }
+    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_DIV(1U) | GCLK_GENCTRL_SRC(7U) | GCLK_GENCTRL_GENEN;
+
+    while((GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL_GCLK0) == GCLK_SYNCBUSY_GENCTRL_GCLK0)
+    {
+        /* wait for the Generator 0 synchronization */
+    }
+}
+
+static void GCLK1_Initialize(void)
+{
+    GCLK->GENCTRL[1].reg = GCLK_GENCTRL_DIV(12U) | GCLK_GENCTRL_SRC(1U) | GCLK_GENCTRL_GENEN;
+
+    while((GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL_GCLK1) == GCLK_SYNCBUSY_GENCTRL_GCLK1)
+    {
+        /* wait for the Generator 1 synchronization */
+    }
+}
+
+static void GCLK2_Initialize(void)
+{
+    GCLK->GENCTRL[2].reg = GCLK_GENCTRL_DIV(2U) | GCLK_GENCTRL_SRC(8U) | GCLK_GENCTRL_GENEN;
+
+    while((GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL_GCLK2) == GCLK_SYNCBUSY_GENCTRL_GCLK2)
+    {
+        /* wait for the Generator 2 synchronization */
+    }
+}
+
+void system_init(void) {
+    /* MISRAC 2012 deviation block start */
+    /* MISRA C-2012 Rule 2.2 deviated in this file.  Deviation record ID - H3_MISRAC_2012_R_2_2_DR_2 */
+
+    /* Function to Initialize the Oscillators */
+    OSCCTRL_Initialize();
+
+    /* Function to Initialize the 32KHz Oscillators */
+    OSC32KCTRL_Initialize();
+
+    DFLL_Initialize();
+    GCLK1_Initialize();
+    FDPLL0_Initialize();
+    FDPLL1_Initialize();
+    GCLK0_Initialize();
+    GCLK2_Initialize();
+
+    /* MISRAC 2012 deviation block end */
+
+    /* Selection of the Generator and write Lock for USB */
+    GCLK->PCHCTRL[10].reg = GCLK_PCHCTRL_GEN(0x2U)  | GCLK_PCHCTRL_CHEN;
+
+    while ((GCLK->PCHCTRL[10].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN)
+    {
+        /* Wait for synchronization */
+    }
+
+    /* Configure the AHB Bridge Clocks */
+    MCLK->AHBMASK.reg = 0xffffffU;
+
+    /* Configure the APBA Bridge Clocks */
+    MCLK->APBAMASK.reg = 0x7ffU;
+
+    /* Configure the APBB Bridge Clocks */
+    MCLK->APBBMASK.reg = 0x18057U;
+
+    /* Disable DFLL */
+    OSCCTRL->DFLLCTRLA.reg &= ~(OSCCTRL_DFLLCTRLA_ENABLE);
+    while((OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_ENABLE) == OSCCTRL_DFLLSYNC_ENABLE)
+    {
+        /* Waiting for the DPLL enable synchronization */
+    }
+    
+    SysTick_Config(1000);
+}
+#endif
 
 void SysTick_Handler(void) { LED_TICK(); }
